#version 460
#extension GL_NV_ray_tracing : require

struct hitPayload
{
	vec3 hitValue;
};

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadNV hitPayload prd;

layout(binding = 2, set = 0) uniform CameraMatrices
{
	mat4 view;
	mat4 proj;
}
cam;

void main()
{
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeNV.xy);
	vec2       d           = inUV * 2.0 - 1.0;

	const mat4 inverseView = inverse(cam.view);
	vec4 origin    = inverseView * vec4(0, 0, 0, 1);
	vec4 target    = inverse(cam.proj) * vec4(d.x, d.y, 1, 1);
	vec4 direction = inverseView * vec4(normalize(target.xyz), 0);

	uint  rayFlags = gl_RayFlagsOpaqueNV;
	float tMin     = 0.001;
	float tMax     = 10000.0;

	traceNV(topLevelAS,     // acceleration structure
          rayFlags,       // rayFlags
          0xFF,           // cullMask
          0,              // sbtRecordOffset
          0,              // sbtRecordStride
          0,              // missIndex
          origin.xyz,     // ray origin
          tMin,           // ray min range
          direction.xyz,  // ray direction
          tMax,           // ray max range
          0               // payload (location = 0)
  	);

	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(prd.hitValue, 1.0));
}
